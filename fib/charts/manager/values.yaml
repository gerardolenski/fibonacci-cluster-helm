replicaCount: 2

image:
  repository: golenski/fibonacci-task-manager
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    memory: 1Gi
  requests:
    cpu: 50m
    memory: 500Mi

livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 5
  periodSeconds: 5
  failureThreshold: 3
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: http
  initialDelaySeconds: 15
  timeoutSeconds: 5
  periodSeconds: 5
  failureThreshold: 3

nodeSelector: {}
tolerations: []
affinity: {}

config:
  JOB_RESULT_QUEUE_NAME: "job-result"
  RESULT_LISTENER_CONCURRENCY: "1-2"
  POSTGRES_POOL_SIZE: 3
  POSTGRES_CONNECTION_TIMEOUT: 10000
  FIB_ALGORITHMS: "ITERATIVE,EXPONENTIAL"
  LOGGING_LEVEL: "info"